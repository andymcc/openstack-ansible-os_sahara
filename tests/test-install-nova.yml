---
# Copyright 2015, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Playbook for deploying nova
  hosts: nova_all
  user: root
  gather_facts: true
  pre_tasks:
    # NOTE: These are typically installed in the repo server where we build the
    #       nova wheel
    - name: Install packages required to build nova python package
      apt:
        name: "{{ item }}"
      with_items:
        - libxml2-dev
        - libxslt-dev
        - libffi-dev
        - pkg-config
        - libvirt-dev
      when: inventory_hostname in groups['nova_all']
    - name: Ensure rabbitmq vhost
      rabbitmq_vhost:
        name: "{{ nova_rabbitmq_vhost }}"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['nova_all'][0]
      tags:
        - nova-rabbitmq
        - nova-rabbitmq-vhost
    - name: Ensure rabbitmq user
      rabbitmq_user:
        user: "{{ nova_rabbitmq_userid }}"
        password: "{{ nova_rabbitmq_password }}"
        vhost: "{{ nova_rabbitmq_vhost }}"
        configure_priv: ".*"
        read_priv: ".*"
        write_priv: ".*"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['nova_all'][0]
      tags:
        - nova-rabbitmq
        - nova-rabbitmq-user
    - name: Create DB for service
      mysql_db:
        login_user: "{{ galera_root_user }}"
        login_password: "{{ galera_root_password }}"
        login_host: "{{ nova_galera_address }}"
        name: "{{ nova_galera_database }}"
        state: "present"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['nova_all'][0]
      tags:
        - mysql-db-setup
    - name: Grant access to the DB for the service
      mysql_user:
        login_user: "{{ galera_root_user }}"
        login_password: "{{ galera_root_password }}"
        login_host: "{{ nova_galera_address }}"
        name: "{{ nova_galera_database }}"
        password: "{{ nova_container_mysql_password }}"
        host: "{{ item }}"
        state: "present"
        priv: "{{ nova_galera_database }}.*:ALL"
      with_items:
        - "localhost"
        - "%"
      delegate_to: "10.100.100.2"
      when: inventory_hostname == groups['nova_all'][0]
      tags:
        - mysql-db-setup
    - name: Create API DB for service
      mysql_db:
        login_user: "{{ galera_root_user }}"
        login_password: "{{ galera_root_password }}"
        login_host: "{{ nova_api_galera_address }}"
        name: "{{ nova_api_galera_database }}"
        state: "present"
      when: inventory_hostname == groups['nova_all'][0]
      tags:
        - nova-db-setup
    - name: Grant access to the API DB for the service
      mysql_user:
        login_user: "{{ galera_root_user }}"
        login_password: "{{ galera_root_password }}"
        login_host: "{{ nova_api_galera_address }}"
        name: "{{ nova_api_galera_user }}"
        password: "{{ nova_api_container_mysql_password }}"
        host: "{{ item }}"
        state: "present"
        priv: "{{ nova_api_galera_database }}.*:ALL"
      with_items:
        - "localhost"
        - "%"
      when: inventory_hostname == groups['nova_all'][0]
      tags:
        - nova-db-setup
    - name: Check if this is an OpenStack-CI nodepool instance
      stat:
        path: /etc/nodepool/provider
      register: nodepool
      delegate_to: localhost
    - name: Determine the existing Ubuntu repo URL (only on OpenStack-CI)
      shell: 'awk "/^deb .*ubuntu\/? {{ ansible_distribution_release }} main/ {print \$2; exit}" /etc/apt/sources.list'
      register: ubuntu_repo_url
      changed_when: false
      when: nodepool.stat.exists | bool
      delegate_to: localhost
    - name: Set Ubuntu Cloud Archive repo URL based on discovered information
      set_fact:
        uca_apt_repo_url: "{{ ubuntu_repo_url.stdout | netorigin }}/ubuntu-cloud-archive"
      when: nodepool.stat.exists | bool
  roles:
    - role: os_nova
  vars_files:
    - test-vars.yml
